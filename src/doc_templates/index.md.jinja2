# LinkML Registry

The LinkML Registry is a curated collection of projects that utilize the LinkML modeling language. It serves as a
resource for discovering how LinkML is applied across various domains and projects.

For more information on LinkML:

* [LinkML Documentation](https://linkml.io)
* [LinkML Meta Model Specification](https://w3id.org/linkml/docs/specification/)

## Registry Entries

| Title | Topics | Stars | GitHub URL |
|-------|--------|-------|-----------|
{%- for id, entry in entries.items() %}
| {% if entry.schema_url %}[{{ entry.title or '' }}]({{ entry.schema_url }}){% else %}{{ entry.title or '' }}{% endif %}{% if entry.description %}<br/>{{ (entry.description or '')[:100] }}{% if entry.description and entry.description|length > 100 %}...{% endif %}{% endif %} | {% if entry.topics %}{{ entry.topics[:3]|join(', ') }}{% if entry.topics|length > 3 %}...{% endif %}{% endif %} | {{ entry.github_stars or 0 }} [(details)](details/{{ id | replace(':', '_') | replace('/', '_') }}.md) | {% if entry.github_repo %}[{{ id }}]({{ entry.github_repo }}){% else %}{{ id }}{% endif %} |
{%- endfor %}

# The LinkML Registry uses LinkML to define a schema for representing metadata about LinkML-based projects.

## Classes ([Visualization](categories.html))

| Class | Description |
{% for c in schemaview.all_classes(ordered_by="lexical").values()|sort(attribute='name') -%}
{%- if 'association' not in schemaview.class_ancestors(c.name) and not schemaview.is_mixin(c.name) -%}
| --- | --- |
| {{gen.link(c)}} | {{c.description}} |
{%- endif -%}
{% endfor %}

## Class Properties

| Property | Description |
{% for np in schemaview.all_slots(ordered_by="lexical").values()|sort(attribute='name') -%}
{%- if 'node property' in schemaview.slot_ancestors(np.name) -%}
| --- | --- |
| {{gen.link(np)}} | {{np.description}} |
{%- endif -%}
{% endfor %}

## Predicates ([Visualization](predicates.html))

| Property | Description |
{% for p in schemaview.all_slots(ordered_by="lexical").values()|sort(attribute='name') -%}
{%- if 'related to' in schemaview.slot_ancestors(p.name) -%}
| --- | --- |
| {{gen.link(p)}} | {{p.description}} |
{%- endif -%}
{% endfor %}

## Qualifiers ([Visualization](qualifiers.html))

| Property | Description |
{% for p in schemaview.all_slots(ordered_by="lexical").values()|sort(attribute='name') -%}
{%- if 'qualifier' in schemaview.slot_ancestors(p.name) -%}
| --- | --- |
| {{gen.link(p)}} | {{p.description}} |
{%- endif -%}
{% endfor %}


## Associations

| Association | Description |
{% for a in schemaview.all_classes(ordered_by="lexical").values()|sort(attribute='name') -%}
{%- if 'association'  in schemaview.class_ancestors(a.name) and not schemaview.is_mixin(a.name) -%}
| --- | --- |
| {{gen.link(a)}} | {{a.description}} |
{%- endif -%}
{% endfor %}

## Association Properties

| Property | Description |
{% for ep in schemaview.all_slots(ordered_by="lexical").values()|sort(attribute='name') -%}
{%- if 'association slot' in schemaview.slot_ancestors(ep.name) -%}
| --- | --- |
| {{gen.link(ep)}} | {{ep.description}} |
{%- endif -%}
{% endfor %}

## Enumerations

| Enumeration | Description |
| --- | --- |
{% for e in schemaview.all_enums().values()|sort(attribute='name') -%}
| {{gen.link(e)}} | {{e.description}} |
{% endfor %}

## Subsets

| Subset | Description |
| --- | --- |
{% for ss in schemaview.all_subsets().values()|sort(attribute='name') -%}
| {{gen.link(ss)}} | {{ss.description}} |
{% endfor %}

#### Citing Biolink Model
<small> Unni DR, Moxon SAT, Bada M, Brush M, Bruskiewich R, Caufield JH, Clemons PA, Dancik V, Dumontier M, Fecho K, Glusman G,
Hadlock JJ, Harris NL, Joshi A, Putman T, Qin G, Ramsey SA, Shefchek KA, Solbrig H, Soman K, Thessen AE, Haendel MA,
Bizon C, Mungall CJ, The Biomedical Data Translator Consortium (2022).
Biolink Model: A universal schema for knowledge graphs in clinical, biomedical, and translational science. Clin Transl Sci. Wiley; 2022 Jun 6; [https://onlinelibrary.wiley.com/doi/10.1111/cts.13302](https://onlinelibrary.wiley.com/doi/10.1111/cts.13302)
</small>